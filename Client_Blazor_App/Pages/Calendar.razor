@page "/Calendar"

@using global::Shared.Models
@using Client_Blazor_App.Service
@inject IExerciseService ExerciseService
@inject IShareService ShareService
@inject AuthenticationStateProvider AuthenticationStateProvider
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-************" crossorigin="anonymous" />
<div class="calendar">
    <div class="week-switcher">
        <button class="switch-button" @onclick="PreviousWeek">
            <i class="fas fa-arrow-left"></i>
        </button>
        <h3>@GetFormattedWeekRange()</h3>
        <button class="switch-button" @onclick="NextWeek">
            <i class="fas fa-arrow-right"></i>
        </button>
    </div>
    <table>
        <thead>
            <tr>
                @foreach (var day in CurrentWeek)
                {
                    <th>@day.ToString("dddd") @day.ToString("dd")</th>
                }
            </tr>
        </thead>
        <tbody>
        
                <tr>
                    @foreach (var day in CurrentWeek)
                    {
                        <td>
                            <div class="exercises">
                                @if (ExerciseList!=null)
                                {
                                    foreach (var exercise in ExerciseList)
                                    {
                                        @if (day.Date == exercise.Date)
                                        {
                                            <div class="exercise @GetCategoryClass(exercise.CategoryId)">
                                                <div>@exercise.Title</div>
                                                <i class="fas fa-pen edit-icon" @onclick="() => OpenEditModal(exercise)"></i>
                                                <i class="fas fa-trash delete-icon" @onclick="() => OpenDeleteModal(exercise.Id)"></i>

                                            </div>
                                        }
                                        
                                    }
                                }
                            </div>
                            <button type="button" class="add-exercise-btn" @onclick="() => OpenModal(day.Date)">
                                <i class="fas fa-plus"></i>
                            </button>
                            
                            <button type="button" class="share-exercises-btn" @onclick="() => OpenShareModal(day)">
                                <i class="fas fa-share-alt"></i>
                            </button>
                            
                        </td>
                    }
                </tr>
            
        </tbody>
    </table>
</div>
@*//Add exercise pop up*@
<div class="modal" style="display: @(isModalVisible ? "block" : "none")">
    <div class="modal-overlay"></div>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Exercise</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseDialog">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="exerciseTitle">Exercise Name:</label>
                    <input type="text" class="form-control" id="exerciseTitle" @bind="exerciseTitle">
                </div>
                <div class="form-group">
                    <label for="exerciseDate">Date:</label>
                    <input type="date" class="form-control" id="exerciseDate" @bind="exerciseDate">
                </div>
                <div class="form-group">
                    <label for="exerciseWeights">Weights/Reps:</label>
                    <input type="text" class="form-control" id="exerciseWeights" @bind="exerciseWeights">
                </div>
                <div class="form-group">
                    <label for="exerciseAmount">Amount/Duration:</label>
                    <input type="text" class="form-control" id="exerciseAmount" @bind="exerciseAmount">
                </div>
                <div class="form-group">
                    <label for="exerciseCategory">Category:</label>
                    <select class="form-control" id="exerciseCategory" @bind="selectedCategoryId">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Title</option>
                        }
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDialog">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="SaveExercise">OK</button>
            </div>
        </div>
    </div>
</div>
@*//Edit Exercise Pop up*@
<div class="modal" style="display: @(isModalVisible2 ? "block" : "none")">
    <div class="modal-overlay"></div>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Exercise</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseDialogEdit">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="exerciseTitle">Exercise Name:</label>
                    <input type="text" class="form-control" id="exerciseTitle" @bind="exerciseTitle">
                </div>
                <div class="form-group">
                    <label for="exerciseDate">Date:</label>
                    <input type="date" class="form-control" id="exerciseDate" @bind="exerciseDate">
                </div>
                <div class="form-group">
                    <label for="exerciseWeights">Weights/Reps:</label>
                    <input type="text" class="form-control" id="exerciseWeights" @bind="exerciseWeights">
                </div>
                
                <div class="form-group">
                    <label for="exerciseAmount">Amount/Duration:</label>
                    <input type="text" class="form-control" id="exerciseAmount" @bind="exerciseAmount">
                </div>
                
                <div class="form-group">
                    <label for="exerciseCategory">Category:</label>
                    <select class="form-control" id="exerciseCategory" @bind="selectedCategoryId">
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Title</option>
                        }
                    </select>
                </div>
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDialogEdit">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="UpdateExercise">Update</button>
            </div>
        </div>
    </div>
</div>
@*//Delete Pop up*@
<div class="modal" style="display: @(isModalVisible3 ? "block" : "none")">
    <div class="modal-overlay"></div>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Exercise</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseDeleteDialog">&times;</button>
            </div>
            <div class="modal-body">
                <h3>Are you sure you want to delete the exercise?</h3>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseDeleteDialog">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="DeleteExercise">Delete</button>
            </div>
        </div>
    </div>
</div>
@*//Share pop up*@
<div class="modal" style="display: @(isModalVisibleShare ? "block" : "none")">
    <div class="modal-overlay"></div>
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share</h5>
                <button type="button" class="close" data-dismiss="modal" @onclick="CloseShareDialog">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="postComment">Post Comment:</label>
                    <input type="text" class="form-control" id="postComment" @bind="PostComment">
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="CloseShareDialog">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ShareExercises">Share</button>
            </div>
        </div>
    </div>
</div>
@code {

    private IEnumerable<Exercise>? ExerciseList;
    private IEnumerable<DateTime> CurrentWeek { get; set; } = new List<DateTime>();
    private int currentWeekIndex = 0;

    private bool isModalVisible = false;
    
    private string exerciseTitle;
    private DateTime exerciseDate;
    private string exerciseWeights;
    private string exerciseAmount;
    private int selectedCategoryId;
    private List<Category> categories;
    
    private bool isModalVisible2 = false;
    private bool isModalVisible3 = false;

    private string PostComment;
    private bool isModalVisibleShare = false;
    
    protected override async Task OnInitializedAsync()
    {
        var today = DateTime.Today;
        CurrentWeek = GetWeekDates(today);
        categories = new List<Category>
        {
            new Category { Id = 1, Title = "Legs" },
            new Category { Id = 2, Title = "Arms" },
            new Category { Id = 3, Title = "Chest" },
            new Category { Id = 4, Title = "Back" },
            new Category { Id = 5, Title = "Shoulders" },
            new Category { Id = 6, Title = "Core" },
            new Category { Id = 7, Title = "Cardio" },
            new Category { Id = 8, Title = "Full Body" },
            new Category { Id = 9, Title = "HIIT" },
            new Category { Id = 10, Title = "Strength Training" },
            new Category { Id = 11, Title = "Flexibility" },
            new Category { Id = 12, Title = "Balance" },
            new Category { Id = 13, Title = "Plyometrics" },
            new Category { Id = 14, Title = "Yoga" },
            new Category { Id = 15, Title = "Pilates" },
            new Category { Id = 16, Title = "Functional Training" },
            new Category { Id = 17, Title = "Stretching" }
        };
        await UpdateExerciseLists();
    }
    private string GetCategoryClass(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.Id == categoryId);
        return category != null ? $"category-{category.Id}" : string.Empty;
    }

    
    private List<DateTime> GetWeekDates(DateTime date)
    {
        var monday = date.Date.AddDays(-(int)date.DayOfWeek + 1); // Get the previous Monday
        var startOfWeek = monday.Date.AddHours(9); // Set the starting time to 9 AM
        var weekDates = new List<DateTime>();
    
        for (int i = 0; i < 7; i++)
        {
            weekDates.Add(startOfWeek.AddDays(i));
        }
    
        CurrentWeek = weekDates;
        return weekDates;
    }


    private string GetFormattedWeekRange()
    {
        if (CurrentWeek.Any())
        {
            var startDate = CurrentWeek.First();
            var endDate = CurrentWeek.Last();
            return $"{startDate.ToString("MMMM dd")} - {endDate.ToString("MMMM dd")}, {startDate.Year}";
        }

        return string.Empty; // Return an empty string if CurrentWeek is empty
    }

    private async Task PreviousWeek()
    {
        currentWeekIndex--;
        var startDate = DateTime.Today.AddDays(currentWeekIndex * 7);
        CurrentWeek = GetWeekDates(startDate);
        await UpdateExerciseLists();
    }

    private async Task NextWeek()
    {
        currentWeekIndex++;
        var startDate = DateTime.Today.AddDays(currentWeekIndex * 7);
        CurrentWeek = GetWeekDates(startDate);
        await UpdateExerciseLists();
        Console.WriteLine(ExerciseList.ToString());
    }

    private void CloseDialog()
    {
        isModalVisible = false;
        exerciseTitle = null;
        exerciseDate = DateTime.MinValue;
        exerciseAmount = null;
        exerciseWeights = null;
    }

    private void OpenModal(DateTime date)
    {
        isModalVisible = true;
        exerciseDate = date;
    }
    
    private async Task SaveExercise()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.First(claim => claim.Type.Equals("UserId")).Value;
            int userIdInt = Int32.Parse(userId);
            await ExerciseService.RegisterExerciseAsync(exerciseTitle, exerciseDate, exerciseWeights, exerciseAmount, selectedCategoryId, userIdInt);
            await UpdateExerciseLists();
            CloseDialog();
        }
    }

    private async Task UpdateExerciseLists()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userId = user.Claims.First(claim => claim.Type.Equals("UserId")).Value;
            int userIdInt = Int32.Parse(userId);

            var startDate = CurrentWeek.First();
            var endDate = CurrentWeek.Last();
            ExerciseList = await ExerciseService.GetUserExercisesByDateAsync(userIdInt, startDate, endDate);
            
        }
    }
    private Exercise selectedExercise;
    
    private void OpenEditModal(Exercise exercise)
    {
        selectedExercise = exercise;
        exerciseTitle = exercise.Title;
        exerciseAmount = exercise.Amount;
        exerciseWeights = exercise.Weights;
        selectedCategoryId = exercise.CategoryId;
        exerciseDate = exercise.Date;
        isModalVisible2 = true;
    }
    private void CloseDialogEdit()
    {
        isModalVisible2 = false;
        exerciseTitle = null;
        exerciseAmount = null;
        exerciseWeights = null;
        exerciseDate = DateTime.MinValue;
    }


    private async Task UpdateExercise()
    {
        if (selectedExercise != null)
        {
            selectedExercise.Title = exerciseTitle;
            selectedExercise.Date = exerciseDate;
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                var userId = user.Claims.First(claim => claim.Type.Equals("UserId")).Value;
                int userIdInt = Int32.Parse(userId);
                await ExerciseService.UpdateExerciseAsync(selectedExercise.Id, selectedExercise.Title, selectedExercise.Date,selectedExercise.Weights, selectedExercise.Amount, selectedExercise.CategoryId, userIdInt);
                await UpdateExerciseLists();
                CloseDialogEdit();
            }
        }
    }

    private int selectedExerciseDeleteId;
    
    private void OpenDeleteModal(int exerciseId)
    {
        selectedExerciseDeleteId = exerciseId;
        isModalVisible3 = true;
    }
    private void CloseDeleteDialog()
    {
        isModalVisible3 = false;
    }

    private async Task DeleteExercise()
    {
        if (selectedExerciseDeleteId != null)
        {
            await ExerciseService.DeleteExerciseAsync(selectedExerciseDeleteId);
            await UpdateExerciseLists();
            CloseDeleteDialog();
        }
    }

    private DateTime dayShare;

    private void CloseShareDialog()
    {
        isModalVisibleShare = false;
        PostComment = null;
    }

    private void OpenShareModal(DateTime day)
    {
        PostComment = null;
        isModalVisibleShare = true;
        dayShare = day;
    }
    private async Task ShareExercises()
    {
        if (PostComment != null)
        {
            var exercises = ExerciseList.Where(e => e.Date.Date == dayShare.Date).ToList();
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity.IsAuthenticated)
            {
                string userId = user.Claims.First(claim => claim.Type.Equals("UserId")).Value;
                
                await ShareService.ShareExercisesAsync(userId, exercises, PostComment);
                CloseShareDialog();
            }
        }
    }
}
